    /**
    * Get {{ entity }} list.
    *
    * JS Route: TODO: Add route
    *
    * @ApiDoc(
    *      section="{{ entity }}",
    *      authentication=TRUE,
    *      output={
    *          "class"="array<{{ namespace }}\Entity\{{ entity }}>",
    *          "groups"={
    *          },
    *          "parsers" = {
    *              "Nelmio\ApiDocBundle\Parser\JmsMetadataParser",
    *          }
    *      },
    *      statusCodes={
    *          200="The request was successful and the response body contains the resource requested.",
    *          401="Authentication credentials are required to access the resource. All requests must be authenticated.",
    *          403="The supplied authentication credentials are not sufficient to access the resource.",
    *          404="We could not locate the resource based on the specified URL.",
    *      },
    * )
    *
    * @Rest\Get("")
    *
    * @Rest\View()
    *
    * @Rest\QueryParam(name="offset", requirements="\d+", nullable=true, description="Offset from which to start listing.")
    * @Rest\QueryParam(name="limit", requirements="\d+", default="20", description="How many items to return.")
    * @Rest\QueryParam(name="order_by", nullable=true, description="Order by fields. Must be an array ie. &order_by[name]=ASC")
    * @Rest\QueryParam(name="filters", nullable=true, description="Filter by fields. Must be an array ie. &filters[id]=3")
    */
    public function listAction(ParamFetcherInterface $paramFetcher)
    {
        //$this->denyAccessUnlessGranted({{ entity }}Voter::VIEW_LIST, new {{ entity }}());

        $offset = $paramFetcher->get('offset');
        $limit = $paramFetcher->get('limit');
        $order_by = $paramFetcher->get('order_by');
        $filters = !is_null($paramFetcher->get('filters')) ? $paramFetcher->get('filters') : array();

        $repository = $this->getDoctrine()->getRepository( '{{ bundle }}:{{ entity }}' );
        $list = $repository->findBy($filters, $order_by, $limit, $offset);
        if ( !$list ) {
            $this->view( [], Response::HTTP_NOT_FOUND );
        }

        return $this->view( $list, Response::HTTP_OK );
    }